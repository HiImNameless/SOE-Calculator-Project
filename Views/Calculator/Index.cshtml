@model SOE_Calculator_Project.Models.CalculatorPageVM
@{
    ViewData["Title"] = "Calculator";
}
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" />

<div class="container py-4">
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h1 class="h3 mb-0">Calculator</h1>
    </div>

    @if (TempData["Success"] != null)
    {
        <div class="alert alert-success">@TempData["Success"]</div>
    }
    @if (TempData["Info"] != null)
    {
        <div class="alert alert-info">@TempData["Info"]</div>
    }
    @if (TempData["Error"] != null)
    {
        <div class="alert alert-danger">@TempData["Error"]</div>
    }

    <div class="row g-4">
        <!-- Left: Calculator -->
        <div class="col-12 col-lg-7">
            <div class="card shadow-sm">
                <div class="card-body">
                    <!-- Display -->
                    <div class="mb-3">
                        <input id="display" class="form-control form-control-lg text-end" type="text" placeholder="0" aria-label="Display" readonly />
                    </div>

                    <div class="d-flex justify-content-between align-items-center mb-2">
                        <div class="btn-group btn-group-sm" role="group" aria-label="Mode">
                            <button id="mode-basic" class="btn btn-outline-secondary active">Arithmetic</button>
                            <button id="mode-sci" class="btn btn-outline-secondary">Scientific</button>
                        </div>
                        <!-- Optional: degrees/radians toggle (comment out if you don’t want it) -->
                        <div class="form-check form-switch">
                            <input class="form-check-input" type="checkbox" id="degToggle" checked>
                            <label class="form-check-label small" for="degToggle">Degrees</label>
                        </div>
                    </div>

                    <!-- Keypad -->
                    <div class="row g-2">
                        <div class="col-3"><button class="btn btn-light w-100" data-act="clear">C</button></div>
                        <div class="col-3"><button class="btn btn-light w-100" data-key="(">(</button></div>
                        <div class="col-3"><button class="btn btn-light w-100" data-key=")">)</button></div>
                        <div class="col-3"><button class="btn btn-warning w-100" data-key="/">÷</button></div>

                        <div class="col-3"><button class="btn btn-outline-secondary w-100" data-key="7">7</button></div>
                        <div class="col-3"><button class="btn btn-outline-secondary w-100" data-key="8">8</button></div>
                        <div class="col-3"><button class="btn btn-outline-secondary w-100" data-key="9">9</button></div>
                        <div class="col-3"><button class="btn btn-warning w-100" data-key="*">×</button></div>

                        <div class="col-3"><button class="btn btn-outline-secondary w-100" data-key="4">4</button></div>
                        <div class="col-3"><button class="btn btn-outline-secondary w-100" data-key="5">5</button></div>
                        <div class="col-3"><button class="btn btn-outline-secondary w-100" data-key="6">6</button></div>
                        <div class="col-3"><button class="btn btn-warning w-100" data-key="-">−</button></div>

                        <div class="col-3"><button class="btn btn-outline-secondary w-100" data-key="1">1</button></div>
                        <div class="col-3"><button class="btn btn-outline-secondary w-100" data-key="2">2</button></div>
                        <div class="col-3"><button class="btn btn-outline-secondary w-100" data-key="3">3</button></div>
                        <div class="col-3"><button class="btn btn-warning w-100" data-key="+">+</button></div>

                        <div class="col-3"><button class="btn btn-outline-secondary w-100" data-key="0">0</button></div>
                        <div class="col-3"><button class="btn btn-outline-secondary w-100" data-key=".">.</button></div>
                        <div class="col-3"><button class="btn btn-secondary w-100" data-act="backspace">⌫</button></div>
                        <div class="col-3"><button class="btn btn-success w-100" data-act="equals">=</button></div>
                    </div>

                    <!-- Scientific keypad (hidden in arithmetic mode) -->
                    <div id="sci-rows" class="row g-2 d-none">
                        <div class="col-3"><button class="btn btn-light w-100" data-fn="sin">sin</button></div>
                        <div class="col-3"><button class="btn btn-light w-100" data-fn="cos">cos</button></div>
                        <div class="col-3"><button class="btn btn-light w-100" data-fn="tan">tan</button></div>
                        <div class="col-3"><button class="btn btn-light w-100" data-fn="sqrt">√</button></div>

                        <div class="col-3"><button class="btn btn-light w-100" data-const="pi">π</button></div>
                        <div class="col-3"><button class="btn btn-light w-100" data-const="e">e</button></div>
                        <div class="col-3"><button class="btn btn-light w-100" data-op="^">xʸ</button></div>
                        <div class="col-3"><button class="btn btn-light w-100" data-op="%">%</button></div>

                        <div class="col-3"><button class="btn btn-light w-100" data-fn="log10">log</button></div>
                        <div class="col-3"><button class="btn btn-light w-100" data-fn="ln">ln</button></div>
                        <div class="col-3"><button class="btn btn-light w-100" data-op="!">n!</button></div>
                        <div class="col-3"><button class="btn btn-light w-100" data-fn="pow2">x²</button></div>
                    </div>

                    <hr class="my-3" />

                    <!-- Actions -->
                    <div class="d-flex flex-wrap gap-2">
                        <form id="sessionForm" asp-action="AddToSessionHistory" method="post" class="d-inline">
                            @Html.AntiForgeryToken()
                            <input name="expression" id="sessionExpression" type="hidden" />
                            <input name="result" id="sessionResult" type="hidden" />
                        </form>

                        <form id="saveForm" asp-action="Save" method="post" class="d-inline">
                            @Html.AntiForgeryToken()
                            <input name="expression" id="saveExpression" type="hidden" />
                            <input name="result" id="saveResult" type="hidden" />
                        </form>
                    </div>
                </div>
            </div>
        </div>

        <!-- Right: Sidebar -->
        <div class="col-12 col-lg-5">
            <div class="card shadow-sm">
                <div class="card-body">
                    <div class="d-flex gap-2 mb-3">
                        <button id="btnSession" class="btn btn-outline-secondary btn-sm active">Session History</button>
                        <button id="btnSaved" class="btn btn-outline-secondary btn-sm">Saved</button>
                        <div class="ms-auto">
                            <!-- Contextual action area -->
                            <form id="clearSessionForm" asp-action="ClearSessionHistory" method="post" class="d-inline">
                                @Html.AntiForgeryToken()
                                <button class="btn btn-outline-danger btn-sm" title="Clear session history">Clear Session</button>
                            </form>
                        </div>
                    </div>

                     //Kamohelo Phatsoane 224090026
                     //The button for push-to-talk
                      <div class="mb-3 d-flex align-items-center gap-2">
                            <button type="button" id="voiceBtn" class="btn btn-outline-primary">
                                 <i class="fas fa-microphone"></i> Speak
                            </button>
                                <small id="voiceStatus" class="text-muted">Voice input is idle</small>
                      </div>

                    <!-- Session List -->
                    <div id="panelSession">
                        @if (Model.SessionHistory.Any())
                        {
                            <div class="list-group list-group-flush">
                                @foreach (var row in Model.SessionHistory)
                                {
                                    <div class="list-group-item d-flex justify-content-between align-items-center">
                                        <div class="small">
                                            <div><strong>@row.Expression</strong></div>
                                            <div class="text-muted">= @row.Result</div>
                                        </div>
                                        <div class="text-nowrap">
                                            <form asp-action="Save" method="post" class="d-inline">
                                                @Html.AntiForgeryToken()
                                                <input type="hidden" name="expression" value="@row.Expression" />
                                                <input type="hidden" name="result" value="@row.Result" />
                                                <button type="submit" class="btn btn-sm btn-outline-primary">Save</button>
                                            </form>
                                        </div>
                                    </div>
                                }
                            </div>
                        }
                        else
                        {
                            <div class="text-muted">No items in this session yet.</div>
                        }
                    </div>

                    <!-- Saved List -->
                    <div id="panelSaved" class="d-none">
                        @if (Model.Saved.Any())
                        {
                            <div class="list-group list-group-flush">
                                @foreach (var row in Model.Saved)
                                {
                                    <div class="list-group-item">
                                        <div class="d-flex justify-content-between align-items-center">
                                            <div class="small">
                                                <div><strong>@row.Expression</strong></div>
                                                <div class="text-muted">= @row.Result</div>
                                            </div>
                                            <div class="text-nowrap">
                                                <form asp-action="DeleteConfirmed" method="post" class="d-inline">
                                                    @Html.AntiForgeryToken()
                                                    <input type="hidden" name="id" value="@row.Id" />
                                                    <button type="submit" class="btn btn-sm btn-danger ms-1">Delete</button>
                                                </form >

                                            </div>
                                        </div>
                                    </div>
                                }
                            </div>
                        }
                        else
                        {
                            <div class="text-muted">
                                @if (string.IsNullOrEmpty(Model.Username))
                                {
                                    <span>Sign in to view saved calculations.</span>
                                }
                                else
                                {
                                    <span>No saved calculations yet.</span>
                                }
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    (() => {
        const display = document.getElementById('display');
        const allowed = /^[0-9+\-*/().\s^%!a-zA-Z,]+$/;

        const sciRows = document.getElementById('sci-rows');
        const modeBasic = document.getElementById('mode-basic');
        const modeSci = document.getElementById('mode-sci');
        const degToggle = document.getElementById('degToggle');
        const btnSession = document.getElementById('btnSession');
        const btnSaved = document.getElementById('btnSaved');
        const panelSession = document.getElementById('panelSession');
        const panelSaved = document.getElementById('panelSaved');

        function showPanel(which) {
            if (which === 'session') {
                panelSession.classList.remove('d-none');
                panelSaved.classList.add('d-none');
                btnSession.classList.add('active');
                btnSaved.classList.remove('active');
            } else {
                panelSession.classList.add('d-none');
                panelSaved.classList.remove('d-none');
                btnSession.classList.remove('active');
                btnSaved.classList.add('active');
            }
        }

        btnSession.addEventListener('click', () => showPanel('session'));
        btnSaved.addEventListener('click', () => showPanel('saved'));

              // ----- Mode toggle -----
      function setMode(sci) {
        if (sci) {
          sciRows.classList.remove('d-none');
          modeSci.classList.add('active');
          modeBasic.classList.remove('active');
        } else {
          sciRows.classList.add('d-none');
          modeBasic.classList.add('active');
          modeSci.classList.remove('active');
        }
      }
      modeBasic.addEventListener('click', () => setMode(false));
      modeSci.addEventListener('click', () => setMode(true));

      // ----- Helpers -----
      function write(val) { display.value += val; }
      function backspace() { display.value = display.value.slice(0, -1); }
      function clearAll() { display.value = ''; }

      // Insert function names nicely: clicking 'sin' writes "sin(" etc.
      function insertFunction(name) {
        const map = {
          sin: 'sin(', cos: 'cos(', tan: 'tan(',
          sqrt: 'sqrt(', log10: 'log(', ln: 'ln(', pow2: '^2'
        };
        write(map[name] ?? '');
      }
      function insertConst(name) {
        if (name === 'pi') write('π');
        else if (name === 'e') write('e');
      }
      function insertOp(op) {
        if (op === '^') write('^');
        else if (op === '%') write('%');
        else if (op === '!') write('!');
      }

      // ----- Safe-ish compute with preprocessing -----
      function compute() {
        let exprRaw = display.value.trim();
        if (!exprRaw) return null;

        // Normalize symbols
        let expr = exprRaw
          .replace(/×/g, '*')
          .replace(/÷/g, '/')
          .replace(/π/g, 'PI')
          .replace(/√/g, 'sqrt');

        if (!allowed.test(expr)) {
          alert('Invalid characters in expression.');
          return null;
        }

        // Replace functions with Math.* and handle degrees if enabled
        const useDegrees = !!degToggle?.checked;

        // Handle factorial: turn "n!" into "fact(n)"
        // Supports nested: 5!! won’t be supported; single factorial only.
        expr = expr.replace(/(\d+(?:\.\d+)?)\s*!/g, (_m, n) => `fact(${n})`);

        // Power operator: a^b -> Math.pow(a,b)
        // Replace ^ with ** for JS, simpler & safe in Function. But we’ll still clamp with Math.pow if you prefer.
        expr = expr.replace(/\^/g, '**');

        // Percent: treat trailing % as /100 (e.g., 50% => 0.5)
        expr = expr.replace(/(\d+(?:\.\d+)?)%/g, (_m, n) => `(${n}/100)`);

        // Map names to Math.*, and provide degree-aware wrappers
        // We’ll allow sin,cos,tan,log,ln,sqrt explicitly, and PI/e as constants.
        const pre = `
          const PI = Math.PI;
          const e = Math.E;
          const rad = (deg) => (deg * PI / 180);
          const sin = (x) => Math.sin(${useDegrees ? 'rad(x)' : 'x'});
          const cos = (x) => Math.cos(${useDegrees ? 'rad(x)' : 'x'});
          const tan = (x) => Math.tan(${useDegrees ? 'rad(x)' : 'x'});
          const sqrt = (x) => Math.sqrt(x);
          const log  = (x) => Math.log10(x);
          const ln   = (x) => Math.log(x);
          const fact = (n) => {
            n = Number(n);
            if (!Number.isInteger(n) || n < 0) throw new Error('Invalid factorial');
            let r = 1; for (let i=2;i<=n;i++) r*=i; return r;
          };
        `;

        // Evaluate with a tightly-scoped Function
        try {
          // eslint-disable-next-line no-new-func
          const fn = Function(`"use strict"; ${pre}; return (${expr});`);
          const result = fn();
          if (typeof result !== 'number' || !isFinite(result)) throw new Error('NaN');
          return { expr: exprRaw, result: String(result) };
        } catch (e) {
          alert('Invalid expression.');
          return null;
        }
      }

      // ----- Button handling -----
      document.addEventListener('click', (e) => {
        const btn = e.target.closest('button');
        if (!btn) return;

        // existing keys
        const key = btn.getAttribute('data-key');
        const act = btn.getAttribute('data-act');

        // scientific inserts
        const fn  = btn.getAttribute('data-fn');
        const cst = btn.getAttribute('data-const');
        const op  = btn.getAttribute('data-op');

        if (key) { write(key); return; }
        if (fn) { insertFunction(fn); return; }
        if (cst) { insertConst(cst); return; }
        if (op) { insertOp(op); return; }

        if (act === 'backspace') { backspace(); return; }
        if (act === 'clear') { clearAll(); return; }
        if (act === 'equals') {
          const payload = compute();
          if (!payload) return;

          // push to both hidden forms you already have
          document.getElementById('sessionExpression').value = payload.expr;
          document.getElementById('sessionResult').value = payload.result;
          document.getElementById('saveExpression').value = payload.expr;
          document.getElementById('saveResult').value = payload.result;

          // Auto-add to session on "="
          document.getElementById('sessionForm').submit();
        }
      });

      // ----- Keyboard support (basic keys + ^) -----
      document.addEventListener('keydown', (e) => {
        if (e.key === 'Enter') { e.preventDefault(); document.querySelector('[data-act="equals"]')?.click(); }
        else if (e.key === 'Backspace') { e.preventDefault(); backspace(); }
        else if (e.key === 'Escape') { e.preventDefault(); clearAll(); }
        else if (/^[0-9+\-*/().^]$/.test(e.key)) { e.preventDefault(); write(e.key); }
      });

      // default mode = Arithmetic
      setMode(false);
    })();

//Kamohelo Phatsoane 224090026
     // --- Voice Recognition Setup ---
 const voiceBtn = document.getElementById('voiceBtn');
 const voiceStatus = document.getElementById('voiceStatus');
 const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;

 if (SpeechRecognition) {
     const recognition = new SpeechRecognition();
     recognition.lang = 'en-US';
     recognition.interimResults = false;
     recognition.maxAlternatives = 1;

     voiceBtn.addEventListener('click', () => {
         recognition.start();
         voiceStatus.textContent = 'Listening...';
     });

     recognition.addEventListener('result', (event) => {
         const transcript = event.results[0][0].transcript;
         voiceStatus.textContent = 'Recognized: ' + transcript;

         //Cleans the input
            let cleaned = transcript.toLowerCase();
 cleaned = cleaned
     .replace(/plus/g, '+')
     .replace(/minus/g, '-')
     .replace(/times|multiplied by/g, '*')
     .replace(/divided by|over/g, '/')
     .replace(/into/g, '*')
     .replace(/point/g, '.')
     .replace(/equals/g, '=')
     .replace(/[^0-9+\-*/().^%= ]/g, ''); 
         document.getElementById('display').value = cleaned;
     });

     recognition.addEventListener('speechend', () => {
         recognition.stop();
     });

     recognition.addEventListener('error', (event) => {
         voiceStatus.textContent = 'Error: ' + event.error;
     });
 } else {
     voiceBtn.disabled = true;
     voiceStatus.textContent = "Voice recognition not supported in this browser.";
 }
</script>
